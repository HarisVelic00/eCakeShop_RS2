// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCakeShop.Services.Database;

#nullable disable

namespace eCakeShop.Services.Migrations
{
    [DbContext(typeof(eCakeShopContext))]
    [Migration("20231022144238_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCakeShop.Services.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrzavaID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaID");

                    b.ToTable("Drzavas");

                    b.HasData(
                        new
                        {
                            DrzavaID = 1,
                            Naziv = "Bosna i Hercegovina"
                        },
                        new
                        {
                            DrzavaID = 2,
                            Naziv = "Hrvatska"
                        },
                        new
                        {
                            DrzavaID = 3,
                            Naziv = "Srbija"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Grad", b =>
                {
                    b.Property<int>("GradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradID");

                    b.ToTable("Grads");

                    b.HasData(
                        new
                        {
                            GradID = 1,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            GradID = 2,
                            Naziv = "Zagreb"
                        },
                        new
                        {
                            GradID = 3,
                            Naziv = "Beograd"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikID"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrzavaID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnikID");

                    b.HasIndex("DrzavaID");

                    b.HasIndex("GradID");

                    b.ToTable("Korisniks");

                    b.HasData(
                        new
                        {
                            KorisnikID = 1,
                            DatumRodjenja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7511),
                            DrzavaID = 1,
                            Email = "admin@gmail.com",
                            GradID = 1,
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "/xMQieQ3uGPTlzPRymTnCYF0zdQ=",
                            LozinkaSalt = "eOiUUE75RAT+/j1aeQn6UA==",
                            Prezime = "Admin",
                            Telefon = "000000000"
                        },
                        new
                        {
                            KorisnikID = 2,
                            DatumRodjenja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7728),
                            DrzavaID = 2,
                            Email = "uposlenik@gmail.com",
                            GradID = 2,
                            Ime = "Uposlenik",
                            KorisnickoIme = "uposlenik",
                            LozinkaHash = "tpQoJ0uudPu598n2hmAXSEsvHE0=",
                            LozinkaSalt = "wJuCSeVxKQ64ZtfzD4cJKw==",
                            Prezime = "Uposlenik",
                            Telefon = "000000001"
                        },
                        new
                        {
                            KorisnikID = 3,
                            DatumRodjenja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7758),
                            DrzavaID = 3,
                            Email = "user@gmail.com",
                            GradID = 3,
                            Ime = "User",
                            KorisnickoIme = "user",
                            LozinkaHash = "hvu3VtzhFOXpmjqJ9FSg4YQnlPc=",
                            LozinkaSalt = "ZncUk3RS/Dycf6Kr0SdfPA==",
                            Prezime = "User",
                            Telefon = "000000002"
                        },
                        new
                        {
                            KorisnikID = 4,
                            DatumRodjenja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7786),
                            DrzavaID = 2,
                            Email = "uposlenik2@gmail.com",
                            GradID = 2,
                            Ime = "Uposlenik2",
                            KorisnickoIme = "uposlenik2",
                            LozinkaHash = "Dm68FcB8jetODygzVTdOgDdk4bo=",
                            LozinkaSalt = "bLnw/JfO9PG1zVN3t0vR0g==",
                            Prezime = "Uposlenik2",
                            Telefon = "000000003"
                        },
                        new
                        {
                            KorisnikID = 5,
                            DatumRodjenja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7814),
                            DrzavaID = 3,
                            Email = "user2@gmail.com",
                            GradID = 3,
                            Ime = "User2",
                            KorisnickoIme = "user2",
                            LozinkaHash = "683kWhAf9evsE1kVhjf30Zv1KPk=",
                            LozinkaSalt = "6fXgu+VyXY0Xutw+f5SXsQ==",
                            Prezime = "User2",
                            Telefon = "000000002"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikUlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaID"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("UlogaID")
                        .HasColumnType("int");

                    b.HasKey("KorisnikUlogaID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("UlogaID");

                    b.ToTable("KorisnikUlogas");

                    b.HasData(
                        new
                        {
                            KorisnikUlogaID = 1,
                            DatumIzmjene = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7895),
                            KorisnikID = 1,
                            UlogaID = 1
                        },
                        new
                        {
                            KorisnikUlogaID = 2,
                            DatumIzmjene = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7899),
                            KorisnikID = 1,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 3,
                            DatumIzmjene = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7902),
                            KorisnikID = 2,
                            UlogaID = 2
                        },
                        new
                        {
                            KorisnikUlogaID = 4,
                            DatumIzmjene = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7904),
                            KorisnikID = 4,
                            UlogaID = 2
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaID"));

                    b.Property<string>("BrojNarudzbe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("UplataID")
                        .HasColumnType("int");

                    b.HasKey("NarudzbaID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("UplataID");

                    b.ToTable("Narudzbas");

                    b.HasData(
                        new
                        {
                            NarudzbaID = 1,
                            BrojNarudzbe = "0d5b4fd7-dbe9-48c8-b5df-5e5e69c9fd27",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8037),
                            IsCanceled = false,
                            IsShipped = true,
                            KorisnikID = 3,
                            UplataID = 1
                        },
                        new
                        {
                            NarudzbaID = 2,
                            BrojNarudzbe = "e22f02ea-49a3-4078-801c-7c109ce1f9df",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8043),
                            IsCanceled = false,
                            IsShipped = true,
                            KorisnikID = 3,
                            UplataID = 2
                        },
                        new
                        {
                            NarudzbaID = 3,
                            BrojNarudzbe = "b34e2629-ef8c-4ee5-861a-a26538afa4d5",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8049),
                            IsCanceled = false,
                            IsShipped = false,
                            KorisnikID = 3,
                            UplataID = 3
                        },
                        new
                        {
                            NarudzbaID = 4,
                            BrojNarudzbe = "77189430-0a73-4c39-9396-6af33a815758",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8054),
                            IsCanceled = false,
                            IsShipped = false,
                            KorisnikID = 5,
                            UplataID = 4
                        },
                        new
                        {
                            NarudzbaID = 5,
                            BrojNarudzbe = "88f70a46-638e-47d6-91ba-df1aa48a91c0",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8064),
                            IsCanceled = false,
                            IsShipped = true,
                            KorisnikID = 5,
                            UplataID = 5
                        },
                        new
                        {
                            NarudzbaID = 6,
                            BrojNarudzbe = "5475c2ee-88b7-4348-8b74-f7d61e2508c9",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8069),
                            IsCanceled = false,
                            IsShipped = true,
                            KorisnikID = 5,
                            UplataID = 6
                        },
                        new
                        {
                            NarudzbaID = 7,
                            BrojNarudzbe = "442bce47-bd13-47af-88a3-a53cb0f7c524",
                            DatumNarudzbe = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(8074),
                            IsCanceled = false,
                            IsShipped = false,
                            KorisnikID = 3,
                            UplataID = 7
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.NarudzbaProizvodi", b =>
                {
                    b.Property<int>("NarudzbaProizvodiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaProizvodiID"));

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarudzbaID")
                        .HasColumnType("int");

                    b.Property<int>("ProizvodID")
                        .HasColumnType("int");

                    b.HasKey("NarudzbaProizvodiID");

                    b.HasIndex("NarudzbaID");

                    b.HasIndex("ProizvodID");

                    b.ToTable("NarudzbaProizvodis");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Novost", b =>
                {
                    b.Property<int>("NovostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NovostID"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("NovostID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Novosts");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodID"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sifra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("VrstaProizvodaID")
                        .HasColumnType("int");

                    b.HasKey("ProizvodID");

                    b.HasIndex("VrstaProizvodaID");

                    b.ToTable("Proizvods");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijaID"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<string>("SadrzajRecenzije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecenzijaID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Recenzijas");

                    b.HasData(
                        new
                        {
                            RecenzijaID = 1,
                            DatumKreiranja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7948),
                            KorisnikID = 3,
                            Ocjena = 4,
                            SadrzajRecenzije = "Torta je odlicna"
                        },
                        new
                        {
                            RecenzijaID = 2,
                            DatumKreiranja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7953),
                            KorisnikID = 3,
                            Ocjena = 5,
                            SadrzajRecenzije = "Vrhunski sladoled"
                        },
                        new
                        {
                            RecenzijaID = 3,
                            DatumKreiranja = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7957),
                            KorisnikID = 3,
                            Ocjena = 3,
                            SadrzajRecenzije = "Kolac je mogao biti bolji"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Slika", b =>
                {
                    b.Property<int>("SlikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikaID"));

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SlikaByte")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SlikaID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Slikas");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaID");

                    b.ToTable("Ulogas");

                    b.HasData(
                        new
                        {
                            UlogaID = 1,
                            Naziv = "Administrator",
                            Opis = "Administrator"
                        },
                        new
                        {
                            UlogaID = 2,
                            Naziv = "Uposlenik",
                            Opis = "Uposlenik"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Uplata", b =>
                {
                    b.Property<int>("UplataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UplataID"));

                    b.Property<string>("BrojTransakcije")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumTransakcije")
                        .HasColumnType("datetime2");

                    b.Property<double>("Iznos")
                        .HasColumnType("float");

                    b.HasKey("UplataID");

                    b.ToTable("Uplatas");

                    b.HasData(
                        new
                        {
                            UplataID = 1,
                            BrojTransakcije = "pi_3MSSv3ANnFXjgSPx2LOrScMr",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7975),
                            Iznos = 146.0
                        },
                        new
                        {
                            UplataID = 2,
                            BrojTransakcije = "pi_3MSSwtANnFXjgSPx1GLV7ZWR",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7979),
                            Iznos = 196.0
                        },
                        new
                        {
                            UplataID = 3,
                            BrojTransakcije = "pi_3MSSxZANnFXjgSPx1h6sZONh",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7981),
                            Iznos = 122.0
                        },
                        new
                        {
                            UplataID = 4,
                            BrojTransakcije = "pi_3MSSykANnFXjgSPx0j7dwFvL",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7983),
                            Iznos = 132.0
                        },
                        new
                        {
                            UplataID = 5,
                            BrojTransakcije = "pi_3MSSzFANnFXjgSPx1K5yB3MP",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7986),
                            Iznos = 148.0
                        },
                        new
                        {
                            UplataID = 6,
                            BrojTransakcije = "pi_3MSSzgANnFXjgSPx30vUfLBv",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7988),
                            Iznos = 136.0
                        },
                        new
                        {
                            UplataID = 7,
                            BrojTransakcije = "pi_3MST02ANnFXjgSPx28dm4Ke1",
                            DatumTransakcije = new DateTime(2023, 10, 22, 16, 42, 37, 851, DateTimeKind.Local).AddTicks(7990),
                            Iznos = 66.0
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.VrstaProizvoda", b =>
                {
                    b.Property<int>("VrstaProizvodaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaProizvodaID"));

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VrstaProizvodaID");

                    b.ToTable("VrstaProizvodas");

                    b.HasData(
                        new
                        {
                            VrstaProizvodaID = 1,
                            Naziv = "Torta",
                            Opis = "Torta"
                        },
                        new
                        {
                            VrstaProizvodaID = 2,
                            Naziv = "Kolac",
                            Opis = "Kolac"
                        },
                        new
                        {
                            VrstaProizvodaID = 3,
                            Naziv = "Kolacic",
                            Opis = "Kolacic"
                        },
                        new
                        {
                            VrstaProizvodaID = 4,
                            Naziv = "Pite",
                            Opis = "Pita"
                        },
                        new
                        {
                            VrstaProizvodaID = 5,
                            Naziv = "Cokoladni napitak",
                            Opis = "Cokoladni napitak"
                        },
                        new
                        {
                            VrstaProizvodaID = 6,
                            Naziv = "Quiche",
                            Opis = "Quiche"
                        },
                        new
                        {
                            VrstaProizvodaID = 7,
                            Naziv = "Vocna salata",
                            Opis = "Vocna salata"
                        },
                        new
                        {
                            VrstaProizvodaID = 8,
                            Naziv = "Dzem",
                            Opis = "Dzem"
                        },
                        new
                        {
                            VrstaProizvodaID = 9,
                            Naziv = "Marmelada",
                            Opis = "Marmelada"
                        });
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Korisnik", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCakeShop.Services.Database.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drzava");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.KorisnikUloga", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Korisnik", "Korisnik")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCakeShop.Services.Database.Uloga", "Uloga")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("UlogaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Narudzba", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCakeShop.Services.Database.Uplata", "Uplata")
                        .WithMany()
                        .HasForeignKey("UplataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uplata");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.NarudzbaProizvodi", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Narudzba", "Narudzba")
                        .WithMany("NarudzbaProizvodis")
                        .HasForeignKey("NarudzbaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCakeShop.Services.Database.Proizvod", "Proizvod")
                        .WithMany("NarudzbaProizvodis")
                        .HasForeignKey("ProizvodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Novost", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Proizvod", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.VrstaProizvoda", "VrstaProizvoda")
                        .WithMany()
                        .HasForeignKey("VrstaProizvodaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VrstaProizvoda");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Recenzija", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Slika", b =>
                {
                    b.HasOne("eCakeShop.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Korisnik", b =>
                {
                    b.Navigation("KorisnikUlogas");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Narudzba", b =>
                {
                    b.Navigation("NarudzbaProizvodis");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Proizvod", b =>
                {
                    b.Navigation("NarudzbaProizvodis");
                });

            modelBuilder.Entity("eCakeShop.Services.Database.Uloga", b =>
                {
                    b.Navigation("KorisnikUlogas");
                });
#pragma warning restore 612, 618
        }
    }
}
